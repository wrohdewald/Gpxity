#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) Wolfgang Rohdewald <wolfgang@rohdewald.de>
# See LICENSE for details.

# PYTHON_ARGCOMPLETE_OK
# for command line argument completion, put this into your .bashrc:
# eval "$(register-python-argcomplete gpxdo)"
# or see https://argcomplete.readthedocs.io/en/latest/


"""
gpxdo is a command line tool making use of the Gpxity library
"""


import argparse
import os
import sys
import datetime
from collections import defaultdict

try:
    import argcomplete
    from argcomplete import ChoicesCompleter  # pylint: disable=unused-import
except ImportError:
    pass

# This uses not the installed copy but the development files
_ = os.path.dirname(sys.path[0] or sys.path[1])
if os.path.exists(os.path.join(_, 'gpxity', '__init__.py')):
    sys.path.insert(0, _)
# pylint: disable=wrong-import-position
from gpxity import Track, Directory, BackendDiff, MMT, GPSIES
from gpxity.util import uniq

def __last_month_day(date):
    """Change to the last day of month"""
    year, month, day = date.year, date.month, date.day
    month1 = month + 1
    if month1 == 13:
        year += 1
        month = 1
    next_month_1 = datetime.date(year, month+1, day)
    last_day = (next_month_1 - datetime.timedelta(days=1)).day
    return date + datetime.timedelta(days=last_day - day)

def valid_date_argument(arg_date_str, last: bool, return_raw: bool = True):
    """custom argparse type for date as YYYY-MM-DD"""
    try:
        result = datetime.datetime.strptime(arg_date_str, "%Y-%m-%d")
    except ValueError as exc:
        try:
            result = datetime.datetime.strptime(arg_date_str, "%Y-%m")
            if last:
                result = __last_month_day(result)
        except ValueError as exc:
            try:
                result = datetime.datetime.strptime(arg_date_str, "%Y")
                if last:
                    result = datetime.datetime(year=result.year+1, month=1, day=1)
                    result -= datetime.timedelta(days=1)
            except ValueError as exc:
                print(exc)
                msg = "Given Date ({0}) not valid! Expected format YYYY-MM-DD or YYYY-MM or YYYY".format(arg_date_str)
                raise argparse.ArgumentTypeError(msg)
    return arg_date_str if return_raw else result

class LsField:
    """Abstracts a column in the ls output."""
    # pylint: disable=too-few-public-methods

    fields = list()

    def __init__(self, is_visible, header, value_function, field_fmt=None, summable=None):
        self.is_visible = is_visible
        self.is_needed = is_visible
        self.header = header
        self.head_ident = header.lower().strip().replace(' ', '_')
        if self.find_by_head_ident(self.head_ident):
            raise Exception('LsField already exists:{}'.format(self.head_ident))
        self.value_function = value_function
        self.field_fmt = field_fmt or '{}'
        self.summable = summable
        self.max_length = 0
        LsField.fields.append(self)

    @classmethod
    def visible_fields(cls):
        """Yields all fields to be printed"""
        return (x for x in cls.fields if x.is_visible)

    @classmethod
    def needed_fields(cls):
        """Yields all fields needed for print or for computation"""
        return (x for x in cls.fields if x.is_needed)

    @classmethod
    def visible_headers(cls):
        """Yields all active header ident strings"""
        return (x.head_ident for x in cls.visible_fields())

    def format_value(self, value):
        """Format value according to field rules"""
        value = self.value_function(value)
        return self.format_raw(value)

    def format_raw(self, value):
        """Format value according to field rules"""
        if value is None:
            return ''
        if isinstance(value, str):
            return value
        if self.field_fmt == 'duration':
            hours = value.seconds // 3600
            minutes = (value.seconds - hours * 3600) // 60
            hours += value.days * 24
            return '{:3}:{:02}'.format(hours, minutes)
        if self.field_fmt == 'warnings':
            return '  '.join(value)
        return self.field_fmt.format(value)

    @classmethod
    def find_by_head_ident(cls, head_ident):
        """Returns the field with head_ident."""
        for _ in cls.fields:
            if _.head_ident == head_ident:
                return _
        return None

    @classmethod
    def empty_row(cls):
        """Returns an empty row with matching values"""
        result = dict()
        for field in cls.needed_fields():
            if field.summable is not None:
                _ = field.summable()
            else:
                _ = ''
            result[field.head_ident] = _
        return result

    @classmethod
    def separator_row(cls, separator):
        """Returns a row to be used as separator line"""
        result = dict()
        for field in cls.visible_fields():
            result[field.head_ident] = separator * field.max_length
        return result

    @classmethod
    def from_track(cls, track):
        """Returns a row from track"""
        result = dict()
        for field in LsField.needed_fields():
            result[field.head_ident] = field.value_function(track)
        return result

class Utility:
    """this is where the work is done"""

    def __init__(self):
        self.exit_code = 0
        self.options = None
        self.parse_commandline()
        if self.exit_code:
            return
        self.sources = []
        self.source_tracks = []
        self.destination = None
        try:
            if self.options.source:
                for _ in self.options.source:
                    self.sources.append(self.instantiate_object(_))
                    # optimize the case where destination is also source
                    if hasattr(self.options, 'destination') and _ == self.options.destination:
                        self.destination = self.sources[-1]
                self.source_tracks = self._collect_source_tracks(self.sources)
            if hasattr(self.options, 'destination') and self.destination is None:
                self.destination = self.instantiate_object(self.options.destination)
                if self.options.func not in (self.diff, self.merge):
                    if isinstance(self.destination, Track):
                        raise Exception('Destination must not be a single track:{}'.format(self.options.destination))
                if not isinstance(self.destination, Track) and self.options.verbose and not self.options.copy:
                    print('collecting tracks from', self.destination.identifier())
            self.options.func()
        except Exception as _: # pylint: disable=broad-except
            self.error(_)

    def error(self, msg, exit_code=None):
        """Prints the error message.
        Sets the process exit code.
        With --debug, re-raises the exception."""
        print(msg)
        self.exit_code = exit_code or 1
        if self.options.debug:
            raise msg

    def _collect_source_tracks(self, sources):
        """A copied list with tracks combined from all sources, to be used in 'for'-loops"""
        result = list()
        for source in sources:
            if self.options.verbose:
                print('collecting tracks from', source.identifier())
            if isinstance(source, Track):
                result.append(source)
            else:
                result.extend(source)
        return result

    def move(self):
        """move gpx files.
        We cannot just do merge() followed by remove() because
        the source might have gotten new tracks meanwhile, and
        they would disappear for good."""
        for _ in self.source_tracks:
            new_track = self.destination.add(_)
            try:
                new_track.id_in_backend = _.id_in_backend
            except NotImplementedError:
                pass
            _.remove()
            if self.options.verbose:
                print('moved {} to {}'.format(_, self.destination))

    def remove(self):
        """remove tracks"""
        for _ in self.source_tracks:
            if self.options.dry_run:
                print('would remove {}'.format(_))
            else:
                _.remove()
                if self.options.verbose:
                    print('removed {}'.format(_))

    def list_them(self):
        """list tracks"""
        # pylint: disable=too-many-locals,too-many-branches,too-many-statements
        def yield_track_group_keys(track, mainsort):
            """Yields group key for track"""
            if mainsort == 'category':
                yield track.category
            elif mainsort == 'keywords' and track.keywords:
                for _ in track.keywords:
                    yield _
            elif mainsort == 'time' and track.time:
                yield '{:4}-{:02}'.format(track.time.year, track.time.month)
            else:
                yield None

        def yield_all_group_keys(mainsort):
            """Yields all group keys for all tracks"""
            seen = set()
            for track in self.source_tracks:
                for groupkey in yield_track_group_keys(track, mainsort):
                    if groupkey not in seen:
                        yield groupkey
                        seen.add(groupkey)

        def track_total(tracks):
            """Returns a row with totals over tracks."""
            result = LsField.empty_row()
            for field in LsField.needed_fields():
                if field.summable:
                    for _ in tracks:
                        result[field.head_ident] += _[field.head_ident]
            result['identifier'] = 'TOTAL'
            for speed_ident, duration_ident, length_ident in (
                    ('speed', 'duration', 'length'), ('moving_speed', 'moving_duration', 'moving_length')):
                if speed_ident in result:
                    duration = result[duration_ident]
                    if duration:
                        seconds = duration.days * 24 * 3600 + duration.seconds
                        speed = result[length_ident] / seconds * 3600 if seconds else 0
                        result[speed_ident] = speed
            return result

        list(LsField(*x) for x in (
            (True, 'Identifier', lambda x: x.identifier()),
            (self.options.title, 'Title', lambda x: x.title if x.title else '', '{:.40}'),
            (self.options.time, 'Time', lambda x: x.time),
            (self.options.category, 'Category', lambda x: x.category),
            (self.options.keywords, 'Keywords', lambda x: ','.join(y for y in x.keywords)),
            (self.options.length or self.options.length, 'Length', lambda x: x.length(), '{:>8.3f}km', float),
            (self.options.points, 'Points', lambda x: x.gpx.get_track_points_no(), '{:>6}', int),
            (self.options.status, 'Status', lambda x: 'public' if x.public else 'private'),
            (self.options.description, 'Description', lambda x: x.description),
            (self.options.duration, 'Duration',
             lambda x: x.last_time - x.time if x.time else datetime.timedelta(), 'duration', datetime.timedelta),
            (self.options.speed, 'Speed', lambda x: x.speed(), '{:>5.2f}km/h'),
            (self.options.moving_speed, 'Moving speed', lambda x: x.moving_speed(), '{:>5.2f}km/h'),
            (False, 'Moving duration', lambda x: x.moving_duration, '{}', datetime.timedelta),
            (False, 'Moving length', lambda x: x.moving_length, '{}', float),
            (any(x.warnings() for x in self.source_tracks), 'Warnings', lambda x: x.warnings(), 'warnings')))

        if 'speed' in LsField.visible_headers():
            LsField.find_by_head_ident('duration').is_needed = True
            LsField.find_by_head_ident('length').is_needed = True
        if 'moving_speed' in LsField.visible_headers():
            LsField.find_by_head_ident('moving_duration').is_needed = True
            LsField.find_by_head_ident('moving_length').is_needed = True

        if any(x.head_ident.startswith('moving') for x in LsField.needed_fields()):
            for _ in self.source_tracks:
                bounds = _.gpx.get_moving_data()
                _.moving_duration = datetime.timedelta(seconds=bounds.moving_time)
                _.moving_length = bounds.moving_distance / 1000.0

        sort_fields = list(LsField.find_by_head_ident(x) for x in self.options.sort.split(','))
        for _ in sort_fields:
            _.is_needed = True

        mainsort = None
        group_keys = [None]
        if self.options.sort and self.options.total:
            mainsort = self.options.sort.split(',')[0]
            group_keys = sorted(set(yield_all_group_keys(mainsort)), key=lambda x: '' if x is None else x)

        track_groups = defaultdict(list)
        all_tracks = list()
        for _ in self.source_tracks:
            row = LsField.from_track(_)
            for group in yield_track_group_keys(_, mainsort):
                track_groups[group].append(row)
            all_tracks.append(row)

        all_lines = list()
        for group_key in group_keys:
            lines = track_groups[group_key][:]
            if sort_fields:
                lines.sort(
                    key=lambda x: tuple(x[y.head_ident] for y in sort_fields))
            if self.options.total and mainsort != 'keywords':
                total_line = track_total(lines)
                total_line[mainsort] = group_key
                total_line['identifier'] = 'TOTAL {}'.format(group_key)
                lines.append(total_line)
                lines.append('-')
            all_lines.extend(lines)

        if list(LsField.visible_headers()) != ['identifier', ]:
            all_lines.insert(0, {x.head_ident: x.header for x in LsField.visible_fields()})
        if self.options.total:
            all_lines.append(track_total(all_tracks))
            if mainsort == 'keywords':
                all_lines.append('=')
                for group_key in group_keys:
                    all_lines.append(track_total(track_groups[group_key]))

        for field in LsField.visible_fields():
            field.max_length = max(list(
                len(field.format_raw(x[field.head_ident])) for x in all_lines if isinstance(x, dict)))

        for line in all_lines:
            for field in LsField.visible_fields():
                if isinstance(line, str):
                    print(line * field.max_length, end='  ')
                else:
                    _ = field.format_raw(line[field.head_ident])
                    print('{value:{width}}'.format(width=field.max_length, value=_), end='  ')
            print()

    @staticmethod
    def fix_track(track):
        """fix some bugs in the GPX file"""
        track.fix()

    def fix(self):
        """fix tracks"""
        result_lines = []
        for _ in self.source_tracks:
            result_lines.extend(_.fix(orux24=self.options.orux24))
        if self.options.verbose:
            for _ in result_lines:
                print(_)

    def keyword(self):
        """add/remove a single keyword"""
        for _ in self.source_tracks:
            if self.options.remove:
                if not self.options.dry_run:
                    for kword in self.options.keywords.split(','):
                        _.remove_keyword(kword)
                if self.options.verbose or self.options.dry_run:
                    print('removed {} from {}'.format(self.options.keywords, _))
            else:
                if not self.options.dry_run:
                    for kword in self.options.keywords.split(','):
                        _.add_keyword(kword)
                if self.options.verbose or self.options.dry_run:
                    print('added {} to {}'.format(self.options.keywords, _))

    def set_attributes(self):
        """set/clear some attributes like title"""
        for _ in self.source_tracks:
            if self.options.title_from_id:
                _.title = _.id_in_backend
            if self.options.id_from_title:
                _.id_in_backend = _.title
            if self.options.id_from_time:
                if _.time:
                    _.id_in_backend = str(_.time).replace(' ', '_')
            if self.options.title:
                _.title = self.options.title
            if self.options.description:
                _.description = self.options.description
            if self.options.category:
                _.category = self.options.category
            if self.options.public:
                _.public = True
            if self.options.private:
                _.public = False

    def merge(self):
        """Merge"""
        for source in self.sources:
            msg = self.destination.merge(
                source, remove=self.options.remove, dry_run=self.options.dry_run, copy=self.options.copy)
            if self.options.verbose or self.options.dry_run:
                for _ in msg:
                    print(_)

    def diff(self):
        """Compare"""
        def show_exclusive(side):
            """shows tracks appearing only on one side."""
            backends = uniq(x.backend for x in side.exclusive)
            for backend in backends:
                print('only in {}:'.format(backend.url))
                for _ in side.exclusive:
                    if _.backend is backend:
                        print('    {}'.format(_))
                print()

        differ = BackendDiff(self.source_tracks, self.destination)
        show_exclusive(differ.left)
        show_exclusive(differ.right)

        backend_pairs = uniq((x.left.backend, x.right.backend) for x in differ.similar)

        # pylint: disable=too-many-nested-blocks
        for left, right in backend_pairs:
            print('Differences between {} and {}'.format(left.url, right.url))
            for pair in differ.similar:
                if (pair.left.backend, pair.right.backend) == (left, right):
                    _ = ''.join(x if x in pair.differences else ' ' for x in BackendDiff.diff_flags)
                    print('-{}  {}'.format(_, pair.left))
                    print('+{}  {}'.format(_, pair.right))
                    for key, explain in pair.differences.items():
                        if explain:
                            _ = ''.join(x if x == key else ' ' for x in BackendDiff.diff_flags)
                            for explain_line in explain:
                                print(' {}  {}'.format(_, explain_line))
                    print()

    def instantiate_object(self, name):
        """returns a backend for name.
        If name is a single track, the returned backend has a match filtering
        only this one wanted track."""
        result = account = track_id = None
        if ':' in name and name.split(':')[0].upper() in ('MMT', 'GPSIES'):
            clsname = name.split(':')[0].upper()
            rest = name[len(clsname) + 1:]
            if '/' in rest:
                if rest.count('/') > 1:
                    raise Exception('wrong syntax in {}'.format(name))
                account, track_id = rest.split('/')
            else:
                account = rest
            if clsname == 'MMT':
                result = MMT(auth=account, timeout=self.options.timeout)
            elif clsname == 'GPSIES':
                result = GPSIES(auth=account, timeout=self.options.timeout)
        else:
            if os.path.isdir(name):
                account = name
                result = Directory(url=account)
            else:
                if name.endswith('.gpx'):
                    name = name[:-4]
                if os.path.isfile(name + '.gpx'):
                    account = os.path.dirname(name) or '.'
                    track_id = os.path.basename(name)
                result = Directory(url=account)
        if account is None:
            raise Exception('{} not found'.format(name))
        if track_id:
            result = result[track_id]
        result.match = self.match
        result.debug = self.options.debug
        return result

    def match(self, track):
        """Check against the selecting options. Does cheap check first."""
        # pylint: disable=too-many-return-statements, too-many-branches
        if track.time:
            if self.options.first_date and track.time < self.options.first_date:
                return 'time {} is before {}'.format(track.time, self.options.first_date)
            if self.options.last_date:
                if self.options.last_date.date() and track.time.date() > self.options.last_date.date():
                    return 'time {} is after {}'.format(track.time, self.options.last_date)
        length = track.header_data.get('distance', None)
        if length:
            if self.options.min_length and length < self.options.min_length:
                return 'length {} is below {}'.format(length, self.options.min_length)
            if self.options.max_length and length > self.options.max_length:
                return 'length {} is above {}'.format(length, self.options.max_length)
        if self.options.min_speed and track.speed() < self.options.min_speed:
            return 'Speed is below {}'.format(self.options.min_speed)
        if self.options.max_speed and track.speed() > self.options.max_speed:
            return 'Speed is above {}'.format(self.options.max_speed)
        if self.options.min_points and track.gpx.get_track_points_no() < self.options.min_points:
            return 'point count {} is below {}'.format(track.gpx.get_track_points_no(), self.options.min_points)
        if self.options.max_points and track.gpx.get_track_points_no() > self.options.max_points:
            return 'point count {} is above {}'.format(track.gpx.get_track_points_no(), self.options.max_points)
        if self.options.only_kw and not self.options.only_kw & set(track.keywords):
            return 'keywords {} are not in {}'.format(','.join(self.options.only_kw), ','.join(track.keywords))
        if self.options.only_category and track.category not in self.options.only_category:
            return '{} is different from {}'.format(','.join(self.options.only_category), ','.join(track.category))
        return None

    @staticmethod
    def add_range_args(parser):
        """Add common range arguments"""
        parser.add_argument('--first-date', help='Limit tracks by date',
                            type=lambda x: valid_date_argument(x, False), default=None)
        parser.add_argument('--last-date', help='Limit tracks by date',
                            type=lambda x: valid_date_argument(x, True), default=None)
        parser.add_argument('--date', help='Limit tracks by specific date',
                            type=lambda x: valid_date_argument(x, False), default=None)
        parser.add_argument('--min-points', help='Limit tracks by minimum number of points', type=int, default=None)
        parser.add_argument('--max-points', help='Limit tracks by maximum number of points', type=int, default=None)
        parser.add_argument('--min-length', help='Limit tracks by track length', type=int, default=None)
        parser.add_argument('--max-length', help='Limit tracks by track length', type=int, default=None)
        parser.add_argument('--min-speed', help='Limit tracks by speed', type=int, default=None)
        parser.add_argument('--max-speed', help='Limit tracks by speed', type=int, default=None)
        parser.add_argument('--only-kw', help='Limit tracks by keywords', default=None)
        parser.add_argument('--only-category', help='Limit tracks by category', default=None)

    @staticmethod
    def add_common_args(parser):
        """Add the verbose argument"""
        parser.add_argument('--verbose', action='store_true', help='verbose output', default=False)
        parser.add_argument('--debug', action='store_true', help='debug backend traffic', default=False)
        parser.add_argument('--timeout', help="""
            Timeout: Either one value in seconds or two comma separated values: The first one is the connection timeout,
            the second one is the read timeout. Default is to wait forever.""", type=str, default=None)

    @staticmethod
    def add_multi_source(parser, must_have=False):
        """add --source for one or more tracks or backends"""
        parser.add_argument('source', help='one ore more tracks or backends', nargs='+' if must_have else '*')

    @staticmethod
    def add_destination(parser):
        """add --destination"""
        parser.add_argument('destination', help='the destination backend')

    help_epilog = """

source and destination arguments may be single
tracks or entire backend instances.
Local files and directories are given as usual.
For all other backends, the syntax is:

backend:username  for all tracks in a backend

or

backend:username/track_id for one specific track in a backend

Available backends are:

  - MMT     MapMytracks
  - GPSIES gpsies

The file $HOME/.config/Gpxity/auth.cfg
defines the type of the backend, username and password. Example:

[MMT:username]
Password = whatever

Dates are expected as YYYY-MM-DD, YYYY-MM or YYYY.

"""

    def parse_commandline(self):
        """into self.options"""
        # pylint: disable=too-many-statements, too-many-branches
        parser = argparse.ArgumentParser(
            'gpxdo', formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=self.help_epilog)
        subparsers = parser.add_subparsers()

        mv_parser = subparsers.add_parser(
            'mv', help='move sources to a destination backend',
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        mv_parser.set_defaults(func=self.move)
        self.add_common_args(mv_parser)
        self.add_range_args(mv_parser)
        self.add_multi_source(mv_parser)
        self.add_destination(mv_parser)

        rm_parser = subparsers.add_parser(
            'rm', help='remove tracks',
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        rm_parser.set_defaults(func=self.remove)
        self.add_common_args(rm_parser)
        self.add_range_args(rm_parser)
        rm_parser.add_argument('--dry-run', help='only show what would be removed',
                               action='store_true', default=False)
        self.add_multi_source(rm_parser)

        fix_parser = subparsers.add_parser(
            'fix', help="""try to fix some GPX format bugs in tracks.
                First BACKUP the tracks! This can destroy them!""",
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        fix_parser.set_defaults(func=self.fix)
        fix_parser.add_argument(
            '--orux24',
            help="""BACKUP your tracks first! This can destroy them!
            Try to fix old oruxmaps bug where the date jumps back by one day""",
            action='store_true', default=False)
        self.add_common_args(fix_parser)
        self.add_range_args(fix_parser)
        self.add_multi_source(fix_parser)

        ls_parser = subparsers.add_parser(
            'ls', help='list tracks',
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        ls_parser.set_defaults(func=self.list_them)
        ls_parser.add_argument('--sort',
                               help="""one or more out of identifier,title,category,time,length,
                               points,keywords,status,speed,moving_speed,duration
                               separated by commas (no spaces allowed)""",
                               default='identifier')
        ls_parser.add_argument('--total',
                               help="""Show a total line""",
                               action='store_true', default=False)
        ls_parser.add_argument('--long', help='show most useful info',
                               action='store_true', default=False)
        ls_parser.add_argument('--title', help='show the title',
                               action='store_true', default=False)
        ls_parser.add_argument('--category', help='show the track type',
                               action='store_true', default=False)
        ls_parser.add_argument('--time', help='show the time',
                               action='store_true', default=False)
        ls_parser.add_argument('--length', help='show the length',
                               action='store_true', default=False)
        ls_parser.add_argument('--points', help='show the number of points',
                               action='store_true', default=False)
        ls_parser.add_argument('--status', help='show the status public/private',
                               action='store_true', default=False)
        ls_parser.add_argument('--keywords', help='show the keywords',
                               action='store_true', default=False)
        ls_parser.add_argument('--description', help='show the description',
                               action='store_true', default=False)
        ls_parser.add_argument('--speed', help='show the average speed',
                               action='store_true', default=False)
        ls_parser.add_argument('--moving-speed', help='show the average speed in motion',
                               action='store_true', default=False)
        ls_parser.add_argument('--duration', help='show the entire duration',
                               action='store_true', default=False)
        self.add_common_args(ls_parser)
        self.add_range_args(ls_parser)
        self.add_multi_source(ls_parser)

        keyword_parser = subparsers.add_parser('kw', help='add or remove keywords')
        keyword_parser.set_defaults(func=self.keyword)
        self.add_common_args(keyword_parser)
        self.add_range_args(keyword_parser)
        keyword_parser.add_argument('--dry-run', help='only show what would be done',
                                    action='store_true', default=False)
        keyword_parser.add_argument('--remove', help='remove keywords. Default is to add them.',
                                    action='store_true', default=False)
        keyword_parser.add_argument('keywords', help='keywords separated by commas')
        self.add_multi_source(keyword_parser)

        set_parser = subparsers.add_parser('set', help='set attributes')
        set_parser.set_defaults(func=self.set_attributes)
        set_parser.add_argument('--title-from-id', help='use id for title',
                                action='store_true', default=False)
        set_parser.add_argument('--id-from-title', help='use title for id, works only for Directory',
                                action='store_true', default=False)
        set_parser.add_argument('--id-from-time', help='use time for id, works only for Directory',
                                action='store_true', default=False)
        set_parser.add_argument('--title', help='set the title', type=str, default=None)
        set_parser.add_argument('--description', help='set the description', type=str, default=None)
        set_parser.add_argument('--category', help='set the track type',
                                type=str, default=None, choices=Track.legal_categories)
        set_parser.add_argument('--public', help='set the status to public', action='store_true', default=False)
        set_parser.add_argument('--private', help='set the status to private', action='store_true', default=False)
        self.add_common_args(set_parser)
        self.add_range_args(set_parser)
        self.add_multi_source(set_parser)

        merge_parser = subparsers.add_parser(
            'merge', help="""
            merge tracks: If their trackpoints are identical, add metadata like name,
            description or keywords from source to destination""",
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        merge_parser.set_defaults(func=self.merge)
        self.add_common_args(merge_parser)
        self.add_range_args(merge_parser)
        merge_parser.add_argument('--dry-run', help='only show what would change',
                                  action='store_true', default=False)
        merge_parser.add_argument('--remove', help='remove merged tracks',
                                  action='store_true', default=False)
        merge_parser.add_argument(
            '--copy', help='If the target is a backend, do not look for similar track. '
            'Just copy. This is much faster for remote backends.',
            action='store_true', default=False)
        self.add_multi_source(merge_parser)
        self.add_destination(merge_parser)

        diff_parser = subparsers.add_parser(
            'diff', help="""
            copmpare tracks between source and destination""",
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        diff_parser.set_defaults(func=self.diff)
        self.add_common_args(diff_parser)
        self.add_range_args(diff_parser)
        self.add_multi_source(diff_parser, must_have=True)
        self.add_destination(diff_parser)


        try:
            argcomplete.autocomplete(parser)
        except NameError:
            pass

        if len(sys.argv) < 2:
            parser.print_usage()
            sys.exit(2)

        self.options = parser.parse_args()

        if self.options.timeout is not None:
            if ',' in self.options.timeout:
                self.options.timeout = tuple(float(x) for x in self.options.timeout.split(','))
            else:
                self.options.timeout = float(self.options.timeout)

        if self.options.func == self.list_them:
            if self.options.long:
                self.options.title = True
                self.options.time = True
                self.options.category = True
                self.options.keywords = True
                self.options.length = True
                self.options.status = True
            if not self.options.source:
                self.options.source = ['.']
        elif self.options.func == self.merge:
            if not self.options.source:
                self.options.source = [self.options.destination]
        elif self.options.func == self.set_attributes:
            if self.options.title_from_id and self.options.id_from_title:
                print('gpxdo: error: title-from-id and id-from-title cannot be combined')
            if self.options.title_from_id and self.options.title:
                print('gpxdo: error: title-from-id and title cannot be combined')
            if self.options.id_from_title and self.options.id_from_time:
                print('gpxdo: error: id_from_title and id_from_time cannot be combined')
        if self.options.only_kw:
            self.options.only_kw = set(x.strip() for x in self.options.only_kw.split(','))
        if self.options.only_category:
            self.options.only_category = set(x.strip() for x in self.options.only_category.split(','))
        if not hasattr(self.options, 'copy'):
            self.options.copy = False
        if self.options.date:
            if self.options.first_date or self.options.last_date:
                print('gpxdo: error: cannot have --date with --first-date or --last-date')
                self.exit_code = 2
                return
            self.options.first_date = valid_date_argument(self.options.date, last=False, return_raw=False)
            self.options.last_date = valid_date_argument(self.options.date, last=True, return_raw=False)
        else:
            if self.options.first_date:
                self.options.first_date = valid_date_argument(self.options.first_date, last=False, return_raw=False)
            if self.options.last_date:
                self.options.last_date = valid_date_argument(self.options.last_date, last=True, return_raw=False)


sys.exit(Utility().exit_code)
