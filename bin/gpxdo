#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) Wolfgang Rohdewald <wolfgang@rohdewald.de>
# See LICENSE for details.

# PYTHON_ARGCOMPLETE_OK
# for command line argument completion, put this into your .bashrc:
# eval "$(register-python-argcomplete gpxdo)"
# or see https://argcomplete.readthedocs.io/en/latest/


"""
gpxdo is a command line tool making use of the Gpxity library
"""


import argparse
import os
import sys
import datetime

try:
    import argcomplete
    from argcomplete import ChoicesCompleter  # pylint: disable=unused-import
except ImportError:
    pass

# This uses not the installed copy but the development files
_ = os.path.dirname(sys.path[0] or sys.path[1])
if os.path.exists(os.path.join(_, 'gpxity', '__init__.py')):
    sys.path.insert(0, _)
# pylint: disable=wrong-import-position
from gpxity import Track, Directory, BackendDiff, MMT, GPSIES
from gpxity.util import uniq

def __last_month_day(date):
    """Change to the last day of month"""
    year, month, day = date.year, date.month, date.day
    month1 = month + 1
    if month1 == 13:
        year += 1
        month = 1
    next_month_1 = datetime.date(year, month+1, day)
    last_day = (next_month_1 - datetime.timedelta(days=1)).day
    return date + datetime.timedelta(days=last_day - day)

def valid_date_argument(arg_date_str, last: bool, return_raw: bool = True):
    """custom argparse type for date as YYYY-MM-DD"""
    try:
        result = datetime.datetime.strptime(arg_date_str, "%Y-%m-%d")
    except ValueError as exc:
        try:
            result = datetime.datetime.strptime(arg_date_str, "%Y-%m")
            if last:
                result = __last_month_day(result)
        except ValueError as exc:
            try:
                result = datetime.datetime.strptime(arg_date_str, "%Y")
                if last:
                    result = datetime.datetime(year=result.year+1, month=1, day=1)
                    result -= datetime.timedelta(days=1)
            except ValueError as exc:
                print(exc)
                msg = "Given Date ({0}) not valid! Expected format YYYY-MM-DD or YYYY-MM or YYYY".format(arg_date_str)
                raise argparse.ArgumentTypeError(msg)
    return arg_date_str if return_raw else result


class Utility:
    """this is where the work is done"""

    def __init__(self):
        self.exit_code = 0
        self.options = None
        self.parse_commandline()
        if self.exit_code:
            return
        self.sources = []
        self.source_tracks = []
        self.destination = None
        try:
            if self.options.source:
                for _ in self.options.source:
                    self.sources.append(self.instantiate_object(_))
                    # optimize the case where destination is also source
                    if hasattr(self.options, 'destination') and _ == self.options.destination:
                        self.destination = self.sources[-1]
                self.source_tracks = self._collect_source_tracks(self.sources)
            if hasattr(self.options, 'destination') and self.destination is None:
                self.destination = self.instantiate_object(self.options.destination)
                if self.options.func not in (self.diff, self.merge):
                    if isinstance(self.destination, Track):
                        raise Exception('Destination must not be a single track:{}'.format(self.options.destination))
                if not isinstance(self.destination, Track) and self.options.verbose and not self.options.copy:
                    print('collecting tracks from', self.destination.identifier())
            self.options.func()
        except Exception as _: # pylint: disable=broad-except
            self.error(_)

    def error(self, msg, exit_code=None):
        """Prints the error message.
        Sets the process exit code.
        With --debug, re-raises the exception."""
        print(msg)
        self.exit_code = exit_code or 1
        if self.options.debug:
            raise msg

    def _collect_source_tracks(self, sources):
        """A copied list with tracks combined from all sources, to be used in 'for'-loops"""
        result = list()
        for source in sources:
            if self.options.verbose:
                print('collecting tracks from', source.identifier())
            if isinstance(source, Track):
                result.append(source)
            else:
                result.extend(source)
        return result

    def move(self):
        """move gpx files.
        We cannot just do merge() followed by remove() because
        the source might have gotten new tracks meanwhile, and
        they would disappear for good."""
        for _ in self.source_tracks:
            new_track = self.destination.add(_)
            try:
                new_track.id_in_backend = _.id_in_backend
            except NotImplementedError:
                pass
            _.remove()
            if self.options.verbose:
                print('moved {} to {}'.format(_, self.destination))

    def remove(self):
        """remove tracks"""
        for _ in self.source_tracks:
            if self.options.dry_run:
                print('would remove {}'.format(_))
            else:
                _.remove()
                if self.options.verbose:
                    print('removed {}'.format(_))

    def list_them(self):
        """list tracks"""
        # pylint: disable=too-many-locals
        header_line = list()
        formats = dict() # key: lower_header, value: format
        sort_headers = list()
        output_lines = list()
        total = dict()  # TODO: defaultdict(list)

        def add_to_total(header, month, value):
            """Add to the total dict."""
            if header not in total:
                total[header] = [''] * 13
            if total[header][month] == '':
                total[header][month] = value
            else:
                total[header][month] += value
            if total[header][0] == '':
                total[header][0] = value
            else:
                total[header][0] += value

        def fmt(fmt, value):
            """custom formatting"""
            if value is None:
                return ''
            if value == '':
                return ''
            if fmt is None:
                fmt = '{}'
            if fmt == 'duration':
                hours = value.seconds // 3600
                minutes = (value.seconds - hours * 3600) // 60
                hours += value.days * 24
                return '{:3}:{:02}'.format(hours, minutes)
            return fmt.format(value)

        def add_field(condition, header, value, field_fmt=None):
            """Conditionally add value for the column named 'header'"""
            if condition:
                header_line.append(header)
                lower_header = header.lower().strip().replace(' ', '_')
                sort_headers.append(lower_header)
                total[lower_header] = [''] * 13
                formats[lower_header] = field_fmt
                for idx, _ in enumerate(self.source_tracks):
                    if idx == len(output_lines):
                        output_lines.append([])
                    output_lines[idx].append(fmt(field_fmt, value(_)))
                    if self.options.total and _.time:
                        month = _.time.month
                        if lower_header == 'duration' or (lower_header == 'speed' and 'duration' not in sort_headers):
                            add_to_total('duration', month, _.last_time - _.time)
                        elif lower_header == 'length' or (lower_header == 'speed' and 'length' not in sort_headers):
                            add_to_total('length', month, _.length())
                        elif lower_header == 'moving_speed':
                            bounds = _.gpx.get_moving_data()
                            add_to_total('moving_duration', month, datetime.timedelta(seconds=bounds.moving_time))
                            add_to_total('moving_length', month, bounds.moving_distance / 1000.0)

        def totalspeed(dur_name, len_name, speed_name, month):
            """Compute total speed or moving_speed"""
            duration = total[dur_name][month]
            if duration:
                seconds = duration.days * 24 * 3600 + duration.seconds
                if speed_name not in total:
                    total[speed_name] = [None] * 13
                total[speed_name][month] = total[len_name][month] / seconds * 3600 if seconds else 0

        def add_totals():
            """Add totals"""

            # compute additional totals using other totals
            result = list()
            if 'speed' in sort_headers:
                for month in range(13):
                    totalspeed('duration', 'length', 'speed', month)
            if 'moving_speed' in sort_headers:
                for month in range(13):
                    totalspeed('moving_duration', 'moving_length', 'moving_speed', month)
            for month in range(1, 13):
                if 'identifier' not in total:
                    total['identifier'] = [None] * 13
                if any(total[x][month] for x in sort_headers):
                    total['identifier'][month] = 'TOTAL month {}'.format(month)
                    result.append(list(fmt(formats.get(col), total[col][month]) for col in sort_headers))
            total['identifier'][0] = 'TOTAL {} tracks'.format(len(output_lines) - 1)
            result.append(list(fmt(formats.get(col), total[col][0]) for col in sort_headers))
            return result

        def add_warnings():
            """If we see an obvious problem with a track, add a warnings column."""
            warnings = list()
            if not self.options.long:
                return
            for _ in self.source_tracks:
                warnings.append('  '.join(_.warnings()))
            if any(x for x in warnings):
                header_line.append('Warnings')
                sort_headers.append('warnings')
                for idx, _ in enumerate(warnings):
                    output_lines[idx].append(_)
            total['warnings'] = [''] * 13
            total['warnings'][0] = len([x for x in warnings if x.strip()])

        add_field(True, 'Identifier', lambda x: x.identifier())
        add_field(self.options.title, 'Title', lambda x: x.title if x.title else '', field_fmt='{:.40}')
        add_field(self.options.time, 'Time', lambda x: x.time)
        add_field(self.options.category, 'Category', lambda x: x.category)
        add_field(self.options.keywords, 'Keywords', lambda x: ','.join(y for y in x.keywords))
        add_field(self.options.length or self.options.length, 'Length', lambda x: x.length(), field_fmt='{:>8.3f}km')
        add_field(self.options.points, 'Points', lambda x: x.gpx.get_track_points_no(), field_fmt='{:>6}')
        add_field(self.options.status, 'Status', lambda x: 'public' if x.public else 'private')
        add_field(self.options.description, 'Description', lambda x: x.description)
        add_field(self.options.duration or self.options.speed, 'Duration',
                  lambda x: x.last_time - x.time if x.time else datetime.timedelta(), field_fmt='duration')
        # pylint: disable=unnecessary-lambda
        add_field(self.options.speed, 'Speed', lambda x: x.speed(), field_fmt='{:>5.2f}km/h')
        add_field(self.options.moving_speed, 'Moving speed', lambda x: x.moving_speed(), field_fmt='{:>5.2f}km/h')

        add_warnings()

        if output_lines:
            sort_cols = self.options.sort.split(',')
            output_lines.sort(
                key=lambda x: ','.join('{:100}'.format(x[sort_headers.index(y)]) for y in sort_cols))
            if sort_headers != ['identifier', ]:
                output_lines.insert(0, header_line)
            if self.options.total:
                output_lines.extend(add_totals())
            field_lengths = [0] * len(output_lines[0])
            for column in range(len(output_lines[0])):
                field_lengths[column] = max(len(x[column]) for x in output_lines)
            for _ in output_lines:
                for idx, field in enumerate(_):
                    print('{field:{width}}'.format(width=field_lengths[idx], field=field), end='  ')
                print()

    @staticmethod
    def fix_track(track):
        """fix some bugs in the GPX file"""
        track.fix()

    def fix(self):
        """fix tracks"""
        output_lines = []
        for _ in self.source_tracks:
            output_lines.extend(_.fix(orux24=self.options.orux24))
        if self.options.verbose:
            for _ in output_lines:
                print(_)

    def keyword(self):
        """add/remove a single keyword"""
        for _ in self.source_tracks:
            if self.options.remove:
                if not self.options.dry_run:
                    for kword in self.options.keywords.split(','):
                        _.remove_keyword(kword)
                if self.options.verbose or self.options.dry_run:
                    print('removed {} from {}'.format(self.options.keywords, _))
            else:
                if not self.options.dry_run:
                    for kword in self.options.keywords.split(','):
                        _.add_keyword(kword)
                if self.options.verbose or self.options.dry_run:
                    print('added {} to {}'.format(self.options.keywords, _))

    def set_attributes(self):
        """set/clear some attributes like title"""
        for _ in self.source_tracks:
            if self.options.title_from_id:
                _.title = _.id_in_backend
            if self.options.id_from_title:
                _.id_in_backend = _.title
            if self.options.id_from_time:
                if _.time:
                    _.id_in_backend = str(_.time).replace(' ', '_')
            if self.options.title:
                _.title = self.options.title
            if self.options.description:
                _.description = self.options.description
            if self.options.category:
                _.category = self.options.category
            if self.options.public:
                _.public = True
            if self.options.private:
                _.public = False

    def merge(self):
        """Merge"""
        for source in self.sources:
            msg = self.destination.merge(
                source, remove=self.options.remove, dry_run=self.options.dry_run, copy=self.options.copy)
            if self.options.verbose or self.options.dry_run:
                for _ in msg:
                    print(_)

    def diff(self):
        """Compare"""
        def show_exclusive(side):
            """shows tracks appearing only on one side."""
            backends = uniq(x.backend for x in side.exclusive)
            for backend in backends:
                print('only in {}:'.format(backend.url))
                for _ in side.exclusive:
                    if _.backend is backend:
                        print('    {}'.format(_))
                print()

        differ = BackendDiff(self.source_tracks, self.destination)
        show_exclusive(differ.left)
        show_exclusive(differ.right)

        backend_pairs = uniq((x.left.backend, x.right.backend) for x in differ.similar)

        # pylint: disable=too-many-nested-blocks
        for left, right in backend_pairs:
            print('Differences between {} and {}'.format(left.url, right.url))
            for pair in differ.similar:
                if (pair.left.backend, pair.right.backend) == (left, right):
                    _ = ''.join(x if x in pair.differences else ' ' for x in BackendDiff.diff_flags)
                    print('-{}  {}'.format(_, pair.left))
                    print('+{}  {}'.format(_, pair.right))
                    for key, explain in pair.differences.items():
                        if explain:
                            _ = ''.join(x if x == key else ' ' for x in BackendDiff.diff_flags)
                            for explain_line in explain:
                                print(' {}  {}'.format(_, explain_line))
                    print()

    def instantiate_object(self, name):
        """returns a backend for name.
        If name is a single track, the returned backend has a match filtering
        only this one wanted track."""
        result = account = track_id = None
        if ':' in name and name.split(':')[0].upper() in ('MMT', 'GPSIES'):
            clsname = name.split(':')[0].upper()
            rest = name[len(clsname) + 1:]
            if '/' in rest:
                if rest.count('/') > 1:
                    raise Exception('wrong syntax in {}'.format(name))
                account, track_id = rest.split('/')
            else:
                account = rest
            if clsname == 'MMT':
                result = MMT(auth=account, timeout=self.options.timeout)
            elif clsname == 'GPSIES':
                result = GPSIES(auth=account, timeout=self.options.timeout)
        else:
            if os.path.isdir(name):
                account = name
                result = Directory(url=account)
            else:
                if name.endswith('.gpx'):
                    name = name[:-4]
                if os.path.isfile(name + '.gpx'):
                    account = os.path.dirname(name) or '.'
                    track_id = os.path.basename(name)
                result = Directory(url=account)
        if account is None:
            raise Exception('{} not found'.format(name))
        if track_id:
            result = result[track_id]
        result.match = self.match
        result.debug = self.options.debug
        return result

    def match(self, track):
        """Check against the selecting options. Does cheap check first."""
        # pylint: disable=too-many-return-statements, too-many-branches
        if track.time:
            if self.options.first_date and track.time < self.options.first_date:
                return 'time {} is before {}'.format(track.time, self.options.first_date)
            if self.options.last_date:
                if self.options.last_date.date() and track.time.date() > self.options.last_date.date():
                    return 'time {} is after {}'.format(track.time, self.options.last_date)
        length = track.header_data.get('distance', None)
        if length:
            if self.options.min_length and length < self.options.min_length:
                return 'length {} is below {}'.format(length, self.options.min_length)
            if self.options.max_length and length > self.options.max_length:
                return 'length {} is above {}'.format(length, self.options.max_length)
        if self.options.min_speed and track.speed() < self.options.min_speed:
            return 'Speed is below {}'.format(self.options.min_speed)
        if self.options.max_speed and track.speed() > self.options.max_speed:
            return 'Speed is above {}'.format(self.options.max_speed)
        if self.options.min_points and track.gpx.get_track_points_no() < self.options.min_points:
            return 'point count {} is below {}'.format(track.gpx.get_track_points_no(), self.options.min_points)
        if self.options.max_points and track.gpx.get_track_points_no() > self.options.max_points:
            return 'point count {} is above {}'.format(track.gpx.get_track_points_no(), self.options.max_points)
        if self.options.only_kw and not self.options.only_kw & set(track.keywords):
            return 'keywords {} are not in {}'.format(','.join(self.options.only_kw), ','.join(track.keywords))
        if self.options.only_category and track.category not in self.options.only_category:
            return '{} is different from {}'.format(','.join(self.options.only_category), ','.join(track.category))
        return None

    @staticmethod
    def add_range_args(parser):
        """Add common range arguments"""
        parser.add_argument('--first-date', help='Limit tracks by date',
                            type=lambda x: valid_date_argument(x, False), default=None)
        parser.add_argument('--last-date', help='Limit tracks by date',
                            type=lambda x: valid_date_argument(x, True), default=None)
        parser.add_argument('--date', help='Limit tracks by specific date',
                            type=lambda x: valid_date_argument(x, False), default=None)
        parser.add_argument('--min-points', help='Limit tracks by minimum number of points', type=int, default=None)
        parser.add_argument('--max-points', help='Limit tracks by maximum number of points', type=int, default=None)
        parser.add_argument('--min-length', help='Limit tracks by track length', type=int, default=None)
        parser.add_argument('--max-length', help='Limit tracks by track length', type=int, default=None)
        parser.add_argument('--min-speed', help='Limit tracks by speed', type=int, default=None)
        parser.add_argument('--max-speed', help='Limit tracks by speed', type=int, default=None)
        parser.add_argument('--only-kw', help='Limit tracks by keywords', default=None)
        parser.add_argument('--only-category', help='Limit tracks by category', default=None)

    @staticmethod
    def add_common_args(parser):
        """Add the verbose argument"""
        parser.add_argument('--verbose', action='store_true', help='verbose output', default=False)
        parser.add_argument('--debug', action='store_true', help='debug backend traffic', default=False)
        parser.add_argument('--timeout', help="""
            Timeout: Either one value in seconds or two comma separated values: The first one is the connection timeout,
            the second one is the read timeout. Default is to wait forever.""", type=str, default=None)

    @staticmethod
    def add_multi_source(parser, must_have=False):
        """add --source for one or more tracks or backends"""
        parser.add_argument('source', help='one ore more tracks or backends', nargs='+' if must_have else '*')

    @staticmethod
    def add_destination(parser):
        """add --destination"""
        parser.add_argument('destination', help='the destination backend')

    help_epilog = """

source and destination arguments may be single
tracks or entire backend instances.
Local files and directories are given as usual.
For all other backends, the syntax is:

backend:username  for all tracks in a backend

or

backend:username/track_id for one specific track in a backend

Available backends are:

  - MMT     MapMytracks
  - GPSIES gpsies

The file $HOME/.config/Gpxity/auth.cfg
defines the type of the backend, username and password. Example:

[MMT:username]
Password = whatever

Dates are expected as YYYY-MM-DD, YYYY-MM or YYYY.

"""

    def parse_commandline(self):
        """into self.options"""
        # pylint: disable=too-many-statements, too-many-branches
        parser = argparse.ArgumentParser(
            'gpxdo', formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=self.help_epilog)
        subparsers = parser.add_subparsers()

        mv_parser = subparsers.add_parser(
            'mv', help='move sources to a destination backend',
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        mv_parser.set_defaults(func=self.move)
        self.add_common_args(mv_parser)
        self.add_range_args(mv_parser)
        self.add_multi_source(mv_parser)
        self.add_destination(mv_parser)

        rm_parser = subparsers.add_parser(
            'rm', help='remove tracks',
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        rm_parser.set_defaults(func=self.remove)
        self.add_common_args(rm_parser)
        self.add_range_args(rm_parser)
        rm_parser.add_argument('--dry-run', help='only show what would be removed',
                               action='store_true', default=False)
        self.add_multi_source(rm_parser)

        fix_parser = subparsers.add_parser(
            'fix', help="""try to fix some GPX format bugs in tracks.
                First BACKUP the tracks! This can destroy them!""",
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        fix_parser.set_defaults(func=self.fix)
        fix_parser.add_argument(
            '--orux24',
            help="""BACKUP your tracks first! This can destroy them!
            Try to fix old oruxmaps bug where the date jumps back by one day""",
            action='store_true', default=False)
        self.add_common_args(fix_parser)
        self.add_range_args(fix_parser)
        self.add_multi_source(fix_parser)

        ls_parser = subparsers.add_parser(
            'ls', help='list tracks',
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        ls_parser.set_defaults(func=self.list_them)
        ls_parser.add_argument('--sort',
                               help="""one or more out of identifier,title,category,time,length,
                               points,keywords,status,speed,moving_speed,duration
                               separated by commas (no spaces allowed)""",
                               default='identifier')
        ls_parser.add_argument('--total',
                               help="""Show a total line""",
                               action='store_true', default=False)
        ls_parser.add_argument('--long', help='show most useful info',
                               action='store_true', default=False)
        ls_parser.add_argument('--title', help='show the title',
                               action='store_true', default=False)
        ls_parser.add_argument('--category', help='show the track type',
                               action='store_true', default=False)
        ls_parser.add_argument('--time', help='show the time',
                               action='store_true', default=False)
        ls_parser.add_argument('--length', help='show the length',
                               action='store_true', default=False)
        ls_parser.add_argument('--points', help='show the number of points',
                               action='store_true', default=False)
        ls_parser.add_argument('--status', help='show the status public/private',
                               action='store_true', default=False)
        ls_parser.add_argument('--keywords', help='show the keywords',
                               action='store_true', default=False)
        ls_parser.add_argument('--description', help='show the description',
                               action='store_true', default=False)
        ls_parser.add_argument('--speed', help='show the average speed',
                               action='store_true', default=False)
        ls_parser.add_argument('--moving-speed', help='show the average speed in motion',
                               action='store_true', default=False)
        ls_parser.add_argument('--duration', help='show the entire duration',
                               action='store_true', default=False)
        self.add_common_args(ls_parser)
        self.add_range_args(ls_parser)
        self.add_multi_source(ls_parser)

        keyword_parser = subparsers.add_parser('kw', help='add or remove keywords')
        keyword_parser.set_defaults(func=self.keyword)
        self.add_common_args(keyword_parser)
        self.add_range_args(keyword_parser)
        keyword_parser.add_argument('--dry-run', help='only show what would be done',
                                    action='store_true', default=False)
        keyword_parser.add_argument('--remove', help='remove keywords. Default is to add them.',
                                    action='store_true', default=False)
        keyword_parser.add_argument('keywords', help='keywords separated by commas')
        self.add_multi_source(keyword_parser)

        set_parser = subparsers.add_parser('set', help='set attributes')
        set_parser.set_defaults(func=self.set_attributes)
        set_parser.add_argument('--title-from-id', help='use id for title',
                                action='store_true', default=False)
        set_parser.add_argument('--id-from-title', help='use title for id, works only for Directory',
                                action='store_true', default=False)
        set_parser.add_argument('--id-from-time', help='use time for id, works only for Directory',
                                action='store_true', default=False)
        set_parser.add_argument('--title', help='set the title', type=str, default=None)
        set_parser.add_argument('--description', help='set the description', type=str, default=None)
        set_parser.add_argument('--category', help='set the track type',
                                type=str, default=None, choices=Track.legal_categories)
        set_parser.add_argument('--public', help='set the status to public', action='store_true', default=False)
        set_parser.add_argument('--private', help='set the status to private', action='store_true', default=False)
        self.add_common_args(set_parser)
        self.add_range_args(set_parser)
        self.add_multi_source(set_parser)

        merge_parser = subparsers.add_parser(
            'merge', help="""
            merge tracks: If their trackpoints are identical, add metadata like name,
            description or keywords from source to destination""",
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        merge_parser.set_defaults(func=self.merge)
        self.add_common_args(merge_parser)
        self.add_range_args(merge_parser)
        merge_parser.add_argument('--dry-run', help='only show what would change',
                                  action='store_true', default=False)
        merge_parser.add_argument('--remove', help='remove merged tracks',
                                  action='store_true', default=False)
        merge_parser.add_argument(
            '--copy', help='If the target is a backend, do not look for similar track. '
            'Just copy. This is much faster for remote backends.',
            action='store_true', default=False)
        self.add_multi_source(merge_parser)
        self.add_destination(merge_parser)

        diff_parser = subparsers.add_parser(
            'diff', help="""
            copmpare tracks between source and destination""",
            epilog=self.help_epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
        diff_parser.set_defaults(func=self.diff)
        self.add_common_args(diff_parser)
        self.add_range_args(diff_parser)
        self.add_multi_source(diff_parser, must_have=True)
        self.add_destination(diff_parser)


        try:
            argcomplete.autocomplete(parser)
        except NameError:
            pass

        if len(sys.argv) < 2:
            parser.print_usage()
            sys.exit(2)

        self.options = parser.parse_args()

        if self.options.timeout is not None:
            if ',' in self.options.timeout:
                self.options.timeout = tuple(float(x) for x in self.options.timeout.split(','))
            else:
                self.options.timeout = float(self.options.timeout)

        if self.options.func == self.list_them:
            if self.options.long:
                self.options.title = True
                self.options.time = True
                self.options.category = True
                self.options.keywords = True
                self.options.length = True
                self.options.status = True
            if not self.options.source:
                self.options.source = ['.']
        elif self.options.func == self.merge:
            if not self.options.source:
                self.options.source = [self.options.destination]
        elif self.options.func == self.set_attributes:
            if self.options.title_from_id and self.options.id_from_title:
                print('gpxdo: error: title-from-id and id-from-title cannot be combined')
            if self.options.title_from_id and self.options.title:
                print('gpxdo: error: title-from-id and title cannot be combined')
            if self.options.id_from_title and self.options.id_from_time:
                print('gpxdo: error: id_from_title and id_from_time cannot be combined')
        if self.options.only_kw:
            self.options.only_kw = set(x.strip() for x in self.options.only_kw.split(','))
        if self.options.only_category:
            self.options.only_category = set(x.strip() for x in self.options.only_category.split(','))
        if not hasattr(self.options, 'copy'):
            self.options.copy = False
        if self.options.date:
            if self.options.first_date or self.options.last_date:
                print('gpxdo: error: cannot have --date with --first-date or --last-date')
                self.exit_code = 2
                return
            self.options.first_date = valid_date_argument(self.options.date, last=False, return_raw=False)
            self.options.last_date = valid_date_argument(self.options.date, last=True, return_raw=False)
        else:
            if self.options.first_date:
                self.options.first_date = valid_date_argument(self.options.first_date, last=False, return_raw=False)
            if self.options.last_date:
                self.options.last_date = valid_date_argument(self.options.last_date, last=True, return_raw=False)


sys.exit(Utility().exit_code)
